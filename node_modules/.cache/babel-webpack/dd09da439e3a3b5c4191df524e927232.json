{"ast":null,"code":"import _asyncToGenerator from \"/home/zeyros/Documents/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Status } from './gamestatus';\nexport class Gamelogic {\n  constructor() {\n    this.gameField = [];\n    this.winsSituationOne = [[1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0]];\n    this.gameStatus = Status.STOP;\n    this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  }\n\n  gameStart() {\n    this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.currentTurn = this.randomPlayerStart();\n    console.log(this.currentTurn);\n    this.gameStatus = Status.START;\n  }\n\n  randomPlayerStart() {\n    const startPlayer = Math.floor(Math.random() * 2) + 1;\n    return startPlayer;\n  }\n\n  setField(position, value) {\n    // @ts-ignore\n    this.gameField[position] = value;\n    console.log(this.gameField);\n  }\n\n  getPlayerColorClass() {\n    const colorClass = this.currentTurn === 2 ? 'playerTwo' : 'playerOne';\n    return colorClass;\n  }\n\n  changePlayer() {\n    this.currentTurn = this.currentTurn === 2 ? 1 : 2;\n  }\n\n  checkGameEndWinner() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let isFull = false;\n\n      if (isFull) {\n        _this.gameEnd();\n\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  checkGameEndFull() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let isFull = true;\n\n      if (_this2.gameField.includes(0)) {\n        isFull = false;\n      }\n\n      if (isFull) {\n        _this2.gameEnd();\n\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  gameEnd() {\n    this.gameStatus = Status.STOP;\n  }\n\n}","map":{"version":3,"sources":["/home/zeyros/Documents/tic-tac-toe/src/app/gamelogic.ts"],"names":["Status","Gamelogic","constructor","gameField","winsSituationOne","gameStatus","STOP","gameStart","currentTurn","randomPlayerStart","console","log","START","startPlayer","Math","floor","random","setField","position","value","getPlayerColorClass","colorClass","changePlayer","checkGameEndWinner","isFull","gameEnd","checkGameEndFull","includes"],"mappings":"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","sourcesContent":["import { Status } from './gamestatus';\nexport class Gamelogic {\n    constructor() {\n        this.gameField = [];\n        this.winsSituationOne = [\n            [1, 1, 1, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 1, 1, 1, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 1, 1, 1],\n            [1, 0, 0, 1, 0, 0, 1, 0, 0],\n            [0, 1, 0, 0, 1, 0, 0, 1, 0],\n            [0, 0, 1, 0, 0, 1, 0, 0, 1],\n            [0, 0, 1, 0, 1, 0, 1, 0, 0],\n        ];\n        this.gameStatus = Status.STOP;\n        this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n    gameStart() {\n        this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n        this.currentTurn = this.randomPlayerStart();\n        console.log(this.currentTurn);\n        this.gameStatus = Status.START;\n    }\n    randomPlayerStart() {\n        const startPlayer = Math.floor(Math.random() * 2) + 1;\n        return startPlayer;\n    }\n    setField(position, value) {\n        // @ts-ignore\n        this.gameField[position] = value;\n        console.log(this.gameField);\n    }\n    getPlayerColorClass() {\n        const colorClass = (this.currentTurn === 2) ? 'playerTwo' : 'playerOne';\n        return colorClass;\n    }\n    changePlayer() {\n        this.currentTurn = (this.currentTurn === 2) ? 1 : 2;\n    }\n    async checkGameEndWinner() {\n        let isFull = false;\n        if (isFull) {\n            this.gameEnd();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    async checkGameEndFull() {\n        let isFull = true;\n        if (this.gameField.includes(0)) {\n            isFull = false;\n        }\n        if (isFull) {\n            this.gameEnd();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    gameEnd() {\n        this.gameStatus = Status.STOP;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}